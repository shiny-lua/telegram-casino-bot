import logging
from aiogram import Bot, Dispatcher, executor, types
from os import getenv
from sys import exit

# –¢–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ systemd unit)
token = getenv("BOT_TOKEN")
if not token:
    exit("Error: no token provided")

bot = Bot(token=token)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

SPIN_TEXT = "üé∞ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!"


def get_spin_keyboard():
    # noinspection PyTypeChecker
    return types.ReplyKeyboardMarkup([[SPIN_TEXT]], resize_keyboard=True)


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    start_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –∫–∞–∑–∏–Ω–æ ¬´–ì—É–¥–∏–ª–∞ –ú–æ—Ä–æ—Ö–æ–≤–∞—è¬ª!\n" \
                 "–£ –≤–∞—Å 50 –æ—á–∫–æ–≤. –ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å—Ç–æ–∏—Ç 1 –æ—á–∫–æ, –∞ –∑–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n\n" \
                 "üçãüçã‚ñ´Ô∏è ‚Äî 5 –æ—á–∫–æ–≤\n" \
                 "7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£ ‚Äî 10 –æ—á–∫–æ–≤\n\n" \
                 "<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>: –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ " \
                 "–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç! –õ—É–¥–æ–º–∞–Ω–∏—è ‚Äî —ç—Ç–æ –±–æ–ª–µ–∑–Ω—å, " \
                 "–∞ –Ω–∏–∫–∞–∫–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö –æ–ø—Ü–∏–π –≤ –±–æ—Ç–µ –Ω–µ—Ç."
    await message.answer(start_text, parse_mode="HTML", reply_markup=get_spin_keyboard())


@dp.message_handler()
async def any_message(message: types.Message):
    pass


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
