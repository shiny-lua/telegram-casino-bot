import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from os import getenv
from sys import exit
from asyncio import sleep
import const
import casino

# –¢–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ systemd unit)
token = getenv("BOT_TOKEN")
if not token:
    exit("Error: no token provided")

bot = Bot(token=token)
memory_storage = MemoryStorage()
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)


def get_spin_keyboard():
    # noinspection PyTypeChecker
    return types.ReplyKeyboardMarkup([[const.SPIN_TEXT]], resize_keyboard=True)


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message, state: FSMContext):
    start_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –∫–∞–∑–∏–Ω–æ ¬´–ì—É–¥–∏–ª–∞ –ú–æ—Ä–æ—Ö–æ–≤–∞—è¬ª!\n" \
                 f"–£ –≤–∞—Å {const.START_POINTS} –æ—á–∫–æ–≤. –ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å—Ç–æ–∏—Ç 1 –æ—á–∫–æ, –∞ –∑–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n\n" \
                 "üçãüçã‚ñ´Ô∏è ‚Äî 5 –æ—á–∫–æ–≤ (—Ç–æ—á–∫–∞ = —á—Ç–æ —É–≥–æ–¥–Ω–æ)\n" \
                 "7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£ ‚Äî 10 –æ—á–∫–æ–≤\n\n" \
                 "<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>: –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ " \
                 "–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç! –õ—É–¥–æ–º–∞–Ω–∏—è ‚Äî —ç—Ç–æ –±–æ–ª–µ–∑–Ω—å, " \
                 "–∞ –Ω–∏–∫–∞–∫–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö –æ–ø—Ü–∏–π –≤ –±–æ—Ç–µ –Ω–µ—Ç.\n\n" \
                 "–£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äî /stop"
    data = await state.get_data()
    await state.update_data(score=const.START_POINTS)
    await message.answer(start_text, parse_mode="HTML", reply_markup=get_spin_keyboard())


@dp.message_handler(commands="stop")
async def cmd_stop(message: types.Message):
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞. –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(Text(equals=const.SPIN_TEXT))
async def make_spin(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    user_data = await state.get_data()
    user_score = user_data.get("score", const.START_POINTS)

    if user_score == 0:
        await message.answer_sticker(sticker=const.STICKER_FAIL)
        await message.answer("–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é. –í—ã –º–æ–∂–µ—Ç–µ —Å–º–∏—Ä–∏—Ç—å—Å—è —Å —Å—É–¥—å–±–æ–π –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∂–∏—Ç—å —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é, "
                             "–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—Å—ë –∑–∞–Ω–æ–≤–æ. –ò–ª–∏ /stop, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.")
        return

    print(f"{user_score=}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π—Å –∏ —Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤—ã–ø–∞–ª–æ
    msg = await message.answer_dice(emoji="üé∞")
    dice_combo = casino.get_casino_values(msg.dice.value)
    print(f"{dice_combo=}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∏–ª–∏ –Ω–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç
    is_win, delta = casino.is_winning_combo(dice_combo)
    new_score = user_score + delta
    await state.update_data(score=new_score)
    print(f"{new_score=}")

    # –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ/–ø—Ä–æ–∏–≥—Ä—ã—à–µ –∏
    score_msg = f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {delta} –æ—á–∫–æ–≤!" if is_win else "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏."

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await sleep(2.0)
    await message.answer(f"–í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {', '.join(dice_combo)} (‚Ññ{msg.dice.value})\n{score_msg} "
                         f"–í–∞—à —Å—á—ë—Ç: {new_score} –æ—á–∫.")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
