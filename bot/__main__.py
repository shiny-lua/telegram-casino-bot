import logging
from asyncio import sleep
from os import getenv
from sys import exit

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.redis import RedisStorage2

from bot import casino, const
from bot.throttling import ThrottlingMiddleware, rate_limit

# –¢–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ systemd unit)
token = getenv("BOT_TOKEN")
if not token:
    exit("Error: no token provided")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –±–æ—Ç–∞, —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–∞–º—è—Ç–∏, –ª–æ–≥–µ—Ä–∞ –∏ –∫—ç—à–∞ (–¥–ª—è —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞)
bot = Bot(token=token, parse_mode="HTML")
dp = Dispatcher(
    bot,
    storage=RedisStorage2(
        host=getenv("REDIS_HOST", "redis")
    )
)
logging.basicConfig(level=logging.INFO)


def get_spin_keyboard():
    # noinspection PyTypeChecker
    return types.ReplyKeyboardMarkup([[const.SPIN_TEXT]], resize_keyboard=True)


@rate_limit("default")
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message, state: FSMContext):
    start_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –∫–∞–∑–∏–Ω–æ!\n" \
                 f"–£ –≤–∞—Å {const.START_POINTS} –æ—á–∫–æ–≤. –ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å—Ç–æ–∏—Ç 1 –æ—á–∫–æ, –∞ –∑–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n\n" \
                 "3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ (–∫—Ä–æ–º–µ —Å–µ–º—ë—Ä–∫–∏) ‚Äî 7 –æ—á–∫–æ–≤\n" \
                 "7Ô∏è‚É£7Ô∏è‚É£‚ñ´Ô∏è ‚Äî 5 –æ—á–∫–æ–≤ (—Ç–æ—á–∫–∞ = —á—Ç–æ —É–≥–æ–¥–Ω–æ)\n" \
                 "7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£ ‚Äî 10 –æ—á–∫–æ–≤\n\n" \
                 "<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>: –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ " \
                 "–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç! –õ—É–¥–æ–º–∞–Ω–∏—è ‚Äî —ç—Ç–æ –±–æ–ª–µ–∑–Ω—å, " \
                 "–∞ –Ω–∏–∫–∞–∫–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö –æ–ø—Ü–∏–π, –∫—Ä–æ–º–µ <i>–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ</i> –¥–æ–Ω–∞—Ç–∞ –∞–≤—Ç–æ—Ä—É, –≤ –±–æ—Ç–µ –Ω–µ—Ç.\n\n" \
                 "–£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äî /stop\n" \
                 "–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–∞ ‚Äî /spin"
    await state.update_data(score=const.START_POINTS)
    await message.answer(start_text, reply_markup=get_spin_keyboard())


@rate_limit("default")
@dp.message_handler(commands="stop")
async def cmd_stop(message: types.Message):
    await message.answer(
        "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞. –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /start, –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: /spin",
        reply_markup=types.ReplyKeyboardRemove()
    )


@rate_limit("default")
@dp.message_handler(commands="help")
async def cmd_help(message: types.Message):
    help_text = "–í –∫–∞–∑–∏–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ 4 —ç–ª–µ–º–µ–Ω—Ç–∞: BAR, –≤–∏–Ω–æ–≥—Ä–∞–¥, –ª–∏–º–æ–Ω –∏ —Ü–∏—Ñ—Ä–∞ —Å–µ–º—å. –ö–æ–º–±–∏–Ω–∞—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, 64. " \
                "–î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–µ—Ç–≤–µ—Ä–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∞ –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ " \
                "–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –æ—Ç Bot API –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å " \
                "<a href='https://gist.github.com/MasterGroosha/963c0a82df348419788065ab229094ac'>–∑–¥–µ—Å—å</a>.\n\n" \
                "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ <a href='https://git.groosha.space/shared/telegram-casino-bot'>GitLab</a> " \
                "–∏ –Ω–∞ <a href='https://github.com/MasterGroosha/telegram-casino-bot'>GitHub</a> (–∑–µ—Ä–∫–∞–ª–æ)."
    await message.answer(help_text, disable_web_page_preview=True)


@rate_limit("spin")
@dp.message_handler(commands="spin")
@dp.message_handler(Text(equals=const.SPIN_TEXT))
async def make_spin(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    user_data = await state.get_data()
    user_score = user_data.get("score", const.START_POINTS)

    if user_score == 0:
        await message.answer_sticker(sticker=const.STICKER_FAIL)
        await message.answer("–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é. –í—ã –º–æ–∂–µ—Ç–µ —Å–º–∏—Ä–∏—Ç—å—Å—è —Å —Å—É–¥—å–±–æ–π –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∂–∏—Ç—å —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é, "
                             "–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—Å—ë –∑–∞–Ω–æ–≤–æ. –ò–ª–∏ /stop, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π—Å –∏ —Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤—ã–ø–∞–ª–æ
    msg = await message.answer_dice(emoji="üé∞", reply_markup=get_spin_keyboard())
    dice_combo = casino.get_casino_values(msg.dice.value)
    if not dice_combo:
        await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ü—Ä–æ–±–ª–µ–º–∞ —Å dice ‚Ññ{msg.dice.value}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∏–ª–∏ –Ω–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç
    is_win, delta = casino.is_winning_combo(dice_combo)
    new_score = user_score + delta
    await state.update_data(score=new_score)

    # –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ/–ø—Ä–æ–∏–≥—Ä—ã—à–µ –∏
    score_msg = f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {delta} –æ—á–∫–æ–≤!" if is_win else "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏."

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await sleep(const.THROTTLE_TIME_SPIN)
    await msg.reply(f"–í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {', '.join(dice_combo)} (‚Ññ{msg.dice.value})\n{score_msg} "
                    f"–í–∞—à —Å—á—ë—Ç: <b>{new_score}</b>.")


async def set_commands(dispatcher):
    commands = [
        types.BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–∑–∏–Ω–æ"),
        types.BotCommand(command="spin", description="–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–¥–µ–ª–∞—Ç—å –±—Ä–æ—Å–æ–∫"),
        types.BotCommand(command="stop", description="–£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"),
        types.BotCommand(command="help", description="–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    ]
    await bot.set_my_commands(commands)


dp.middleware.setup(ThrottlingMiddleware())
executor.start_polling(dp, skip_updates=True, on_startup=set_commands)
