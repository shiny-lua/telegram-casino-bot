from asyncio import sleep
from textwrap import dedent

from aiogram import Router
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message

from bot.const import START_POINTS, STICKER_FAIL, SPIN_TEXT, THROTTLE_TIME_SPIN
from bot.dice_check import get_combo_data
from bot.keyboards import get_spin_keyboard


async def cmd_spin(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_score = user_data.get("score", START_POINTS)

    if user_score == 0:
        await message.answer_sticker(sticker=STICKER_FAIL)
        await message.answer(
            "–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é. –í—ã –º–æ–∂–µ—Ç–µ —Å–º–∏—Ä–∏—Ç—å—Å—è —Å —Å—É–¥—å–±–æ–π –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∂–∏—Ç—å —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é, "
            "–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—Å—ë –∑–∞–Ω–æ–≤–æ. –ò–ª–∏ /stop, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."
        )
        return

    answer_text_template = """\
        –í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {combo_text} (‚Ññ{dice_value}).
        {win_or_lose_text} –í–∞—à —Å—á—ë—Ç: <b>{new_score}</b>.
        """

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    msg = await message.answer_dice(emoji="üé∞", reply_markup=get_spin_keyboard())

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–π—Å–µ
    score_change, combo_text = get_combo_data(msg.dice.value)
    if score_change < 0:
        win_or_lose_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏."
    else:
        win_or_lose_text = f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {score_change} –æ—á–∫–æ–≤!"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞
    new_score = user_score + score_change
    await state.update_data(score=new_score)

    await sleep(THROTTLE_TIME_SPIN)
    await msg.reply(
        dedent(answer_text_template).format(
            combo_text=combo_text,
            dice_value=msg.dice.value,
            win_or_lose_text=win_or_lose_text,
            new_score=new_score
        )
    )


def register_spin_command(router: Router):
    flags = {"throttling_key": "spin"}
    router.message.register(cmd_spin, Command(commands="spin"), flags=flags)
    router.message.register(cmd_spin, Text(text=SPIN_TEXT), flags=flags)
